from PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel, QPushButton, QMessageBox, QFrame, QHBoxLayout
from PyQt5.QtGui import QFont, QIcon
from PyQt5.QtCore import Qt
from pathlib import Path
import os
import sys

# register compiled Qt resources
try:
    # compiled resource generated by pyrcc5
    from gui.resources import rc_icons  # noqa: F401
except Exception:
    # fall back silently if resource module is not available
    rc_icons = None


class MainMenuWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.sim_window = None
        self.rosters_window = None
        self._init_ui()

    def _init_ui(self):
        # simple clean layout for the main menu
        self.setWindowTitle('Basketball GM — Main Menu')
        self.resize(420, 320)
        self.setObjectName('StartMenuWindow')

        title_font = QFont('Arial', 22, QFont.Bold)
        btn_font = QFont('Arial', 12, QFont.Bold)
        sub_font = QFont('Arial', 10)

        layout = QVBoxLayout()
        layout.setSpacing(14)

        title = QLabel('Basketball GM')
        title.setObjectName('TitleLabel')
        title.setFont(title_font)
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        subtitle = QLabel('Exhibition Manager')
        subtitle.setFont(sub_font)
        subtitle.setAlignment(Qt.AlignCenter)
        layout.addWidget(subtitle)

        # Primary actions inside a card
        card = QFrame()
        card.setObjectName('StartCard')
        card_layout = QVBoxLayout()
        card_layout.setSpacing(8)

        icon_dir = Path(__file__).parent / '../resources/icons'

        start_btn = QPushButton('Exhibition')
        start_btn.setObjectName('StartButton')
        start_btn.setFont(btn_font)
        # prefer compiled resource path, fall back to the file location
        if rc_icons is not None:
            start_btn.setIcon(QIcon(':/icons/exhibition.svg'))
        else:
            start_btn.setIcon(QIcon(str((icon_dir / 'exhibition.svg').resolve())))
        start_btn.clicked.connect(self.start_game)
        card_layout.addWidget(start_btn)

        rosters_btn = QPushButton('Rosters')
        rosters_btn.setObjectName('RostersButton')
        rosters_btn.setFont(btn_font)
        if rc_icons is not None:
            rosters_btn.setIcon(QIcon(':/icons/rosters.svg'))
        else:
            rosters_btn.setIcon(QIcon(str((icon_dir / 'rosters.svg').resolve())))
        rosters_btn.clicked.connect(self.open_rosters)
        card_layout.addWidget(rosters_btn)

        # small row for reload + exit
        row = QHBoxLayout()
        reload_btn = QPushButton('Reload')
        reload_btn.setObjectName('ReloadButton')
        reload_btn.setFont(btn_font)
        if rc_icons is not None:
            reload_btn.setIcon(QIcon(':/icons/reload.svg'))
        else:
            reload_btn.setIcon(QIcon(str((icon_dir / 'reload.svg').resolve())))
        reload_btn.clicked.connect(self.reload_app)
        row.addWidget(reload_btn)

        exit_btn = QPushButton('Exit')
        exit_btn.setObjectName('ExitButton')
        exit_btn.setFont(btn_font)
        exit_btn.setProperty('accent', True)
        if rc_icons is not None:
            exit_btn.setIcon(QIcon(':/icons/exit.svg'))
        else:
            exit_btn.setIcon(QIcon(str((icon_dir / 'exit.svg').resolve())))
        exit_btn.clicked.connect(self.close)
        row.addWidget(exit_btn)

        card_layout.addLayout(row)
        card.setLayout(card_layout)
        layout.addWidget(card)

        # Footer
        footer = QLabel('Built with ❤️  — Basketball GM')
        footer.setObjectName('FooterLabel')
        footer.setAlignment(Qt.AlignCenter)
        layout.addWidget(footer)

        layout.addStretch(1)
        self.setLayout(layout)

    def start_game(self):
        try:
            if self.sim_window is None:
                from .main_window import BasketballSimulatorWindow  # lazy import
                self.sim_window = BasketballSimulatorWindow()
            self.sim_window.show()
            self.close()
        except Exception as e:
            QMessageBox.critical(self, 'Unable to open', f'Failed to open Exhibition window.\n\n{e}')

    def open_rosters(self):
        try:
            if self.rosters_window is None:
                from .rosters_window import RostersWindow  # lazy import
                self.rosters_window = RostersWindow()
            self.rosters_window.show()
        except Exception as e:
            QMessageBox.critical(self, 'Unable to open', f'Failed to open Rosters window.\n\n{e}')

    def reload_app(self):
        python = sys.executable
        os.execl(python, python, *sys.argv)

